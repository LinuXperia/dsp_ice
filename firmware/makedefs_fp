os:=${shell uname -s}

ifndef COMPILER
COMPILER=gcc
endif

ifeq (${COMPILER}, gcc)

#absolute path to GCC toolchain
PRE_PREFIX=gnu_arm_toolchain
PREFIX=${PRE_PREFIX}/bin/arm-none-eabi

#
# The command for calling the compiler.
#
CC=${PREFIX}-gcc

#
# The flags passed to the assembler.
#
AFLAGS=-mthumb         \
       -mcpu=cortex-m4 \
       -MD

#
# The flags passed to the compiler.
#

CFLAGS=-mcpu=cortex-m4             \
       -mthumb 		\
       -mfloat-abi=hard  \
       -mfpu=fpv4-sp-d16   \
       -fsingle-precision-constant \
       -Os                 \
       -ffunction-sections \
       -fdata-sections     \
       -w \
       -MD                 \
       -Wstrict-prototypes \
       -w \
       -std=c99 \
       -DPART_${PART}      \
       -c

#
# The command for calling the library archiver.
#
AR=${PREFIX}-ar

#
# The command for calling nm 
#
NM=${PREFIX}-nm

#
# The command for calling the linker.
#
LD=${PREFIX}-ld

#
# The flags passed to the linker.
#
#x-tools/lib/gcc/arm-none-eabi/5.2.1/

LDFLAGS=-L ${PRE_PREFIX}/lib/gcc/arm-none-eabi/5.2.1/ \
	   -L ${PRE_PREFIX}/arm-none-eabi/lib/  \
           --gc-sections	   \

#
# Get the location of libgcc.a from the GCC front-end.
#
LIBGCC=${shell ${CC} ${CFLAGS} -print-libgcc-file-name}

#
# Get the location of libc.a from the GCC front-end.
#
LIBC=${shell ${CC} ${CFLAGS} -print-file-name=libc.a}


#
# Get the location of libm.a from the GCC front-end.
#
LIBM=${shell ${CC} ${CFLAGS} -print-file-name=libm.a}

#
# The command for extracting images from the linked executables.
#
OBJCOPY=${PREFIX}-objcopy
OBJDUMP=${PREFIX}-objdump
SIZE=${PREFIX}-size

#
# Tell the compiler to include debugging information if the DEBUG environment
# variable is set.
#
ifdef DEBUG
CFLAGS+=-g -D DEBUG
endif

#
# Add the tool specific CFLAGS.
#
CFLAGS+=${CFLAGSgcc}

#
# Add the include file paths to AFLAGS and CFLAGS.
#
AFLAGS+=${patsubst %,-I%,${subst :, ,${IPATH}}}
CFLAGS+=${patsubst %,-I%,${subst :, ,${IPATH}}}


#
# The rule for building the object file from each C source file.
#
${COMPILER}/%.o: %.c 
	@if [ 'x${VERBOSE}' = x ];                            \
	 then                                                 \
	     echo "  CC    ${<}";                             \
	 else                                                 \
	     echo ${CC} ${CFLAGS} -D${COMPILER} -o ${@} ${<}; \
	 fi
	@${CC} ${CFLAGS} -D${COMPILER} -o ${@} ${<}
ifneq ($(findstring CYGWIN, ${os}), )
	@sed -i -r 's/ ([A-Za-z]):/ \/cygdrive\/\1/g' ${@:.o=.d}
endif

#
# The rule for building the object file from each assembly source file.
#
${COMPILER}/%.o: %.S
	@if [ 'x${VERBOSE}' = x ];                               \
	 then                                                    \
	     echo "  AS    ${<}";                                \
	 else                                                    \
	     echo ${CC} ${AFLAGS} -D${COMPILER} -o ${@} -c ${<}; \
	 fi
	@${CC} ${AFLAGS} -D${COMPILER} -o ${@} -c ${<}
ifneq ($(findstring CYGWIN, ${os}), )
	@sed -i -r 's/ ([A-Za-z]):/ \/cygdrive\/\1/g' ${@:.o=.d}
endif

#
# The rule for creating an object library.
#
${COMPILER}/%.a:
	@if [ 'x${VERBOSE}' = x ];     \
	 then                          \
	     echo "  AR    ${@}";      \
	 else                          \
	     echo ${AR} -cr ${@} ${^}; \
	 fi
	@${AR} -cr ${@} ${^}

#
# The rule for linking the application.
#
#
# The rule for linking the application.
#
${COMPILER}/%.elf:
	@if [ 'x${SCATTERgcc_${notdir ${@:.elf=}}}' = x ];                    \
	 then                                                                 \
	     ldname=${ROOT}/gcc/standalone.ld;                                \
	 else                                                                 \
	     ldname=${SCATTERgcc_${notdir ${@:.elf=}}};                       \
	 fi;                                                                  \
	 if [ 'x${VERBOSE}' = x ];                                            \
	 then                                                                 \
	     echo "  LD    ${@} ${LNK_SCP}";                                  \
	 else                                                                 \
	     echo ${LD} -T $${ldname}                                         \
	          --entry ${ENTRY_${notdir ${@:.elf=}}}                       \
	          ${LDFLAGSgcc_${notdir ${@:.elf=}}}                          \
	          ${LDFLAGS} -o ${@} $(filter %.o %.a, ${^})                  \
	          '${LIBM}' '${LIBC}' '${LIBGCC}'  ;                            \
	 fi;                                                                  \
	${LD} -T $${ldname}                                                   \
	      --entry ${ENTRY_${notdir ${@:.elf=}}}                           \
	      ${LDFLAGSgcc_${notdir ${@:.elf=}}}                              \
	      ${LDFLAGS} -o ${@} $(filter %.o %.a, ${^})                      \
	      '${LIBM}' '${LIBC}' '${LIBGCC}'  
	@${OBJCOPY} --strip-unneeded -O binary ${@} ${@:.elf=.bin}
	@${OBJCOPY} --strip-unneeded -O ihex ${@} ${@:.elf=.hex}
endif

